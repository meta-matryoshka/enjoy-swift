//: [Previous](@previous)

//: **„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å®„ÇØ„É©„Çπ**
class Shape {
    var numberOfSides = 0
    func simpleDescription() -> String {
        return "A shape with \(numberOfSides) sides."
    }
}

// „ÇØ„É©„ÇπÂêç„ÅÆÂæå„Çç„Å´()„Çí„Å§„Åë„Çã„Å®„ÄÅ„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê„Åß„Åç„Åæ„Åô
var shape = Shape()

// ‰ΩúÊàê„Åó„Åü„Ç§„É≥„Çπ„Çø„É≥„Çπ„Å´ÂØæ„Åó„Å¶„Éâ„ÉÉ„Éà„Çí‰Ωø„ÅÜ„Åì„Å®„Åß‰∏≠„ÅÆfunction„ÇÑ„Éó„É≠„Éë„ÉÜ„Ç£„Å∏„Ç¢„ÇØ„Çª„Çπ„Åå„Åß„Åç„Åæ„Åô
shape.simpleDescription()

// „Ç§„Éã„Ç∑„É£„É©„Ç§„Ç∂„ÇíÂê´„Çì„Å†„ÇØ„É©„Çπ
// „Ç§„É≥„Çπ„Çø„É≥„ÇπÁîüÊàêÊôÇ„Å´init„ÅÆÂÄ§„Åå„Çª„ÉÉ„Éà„Åï„Çå„Çã
class NamedShape {
    var numberOfSides: Int = 0
    var name: String
    
    init(name: String) {
        self.name = name
    }
    
    func simpleDescription() -> String {
        return "A shape with \(numberOfSides) sides."
    }
}

var namedShape = NamedShape(name: "üíÆ")
namedShape.name

// init(name: String) {
//     self.name = name
// }
// „ÇØ„É©„ÇπÂÜÖ„ÅÆname„Å®initÂºïÊï∞„ÅÆname„ÇíÂå∫Âà•„Åô„Çã„Åü„ÇÅ„Å´„ÄÅself„Çí‰Ωø„Å£„Å¶„ÅÑ„Çã„ÄÇ


//„Çµ„Éñ„ÇØ„É©„Çπ„ÅØ„ÄÅ„Ç≥„É≠„É≥„Å´Á∂ö„ÅÑ„Å¶super„ÇØ„É©„ÇπÂêç„ÇíË®òËºâ„Åô„Çã„Åì„Å®„Åß‰ΩúÊàê„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Çã

class Square: NamedShape {
    var sideLength: Double
    
    init(sideLength: Double, name: String) {
        self.sideLength = sideLength
        // „Çπ„Éº„Éë„Éº„ÇØ„É©„Çπ„ÅÆinitalizer„ÇíÂëº„Å≥Âá∫„Åô
        super.init(name: name)
        numberOfSides = 4
    }
    
    func area() -> Double {
        return sideLength * sideLength
    }
    
    // super„ÇØ„É©„Çπ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„Çíoverride„Åô„Çã„Å®„Åç„Å´„ÅØ„Ç≥„É≥„Éë„Ç§„É©„ÅÆÈñìÈÅï„ÅÑ„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÈÄö„Åô„Åü„ÇÅ„Å´"overrride"„Å®ÊòéÁ§∫ÁöÑ„Å´Êõ∏„ÅèÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ
    // ÂÆâÂÖ®Ë®≠Ë®à
    override func simpleDescription() -> String {
        return "A square with sides of length \(sideLength)."
    }
}

let test = Square(sideLength: 5.2, name: "my test square")
test.area()
test.simpleDescription()

// Á∑¥Áøí
class Circle : NamedShape {
    var redius : Double
    
    init(name: String, radius: Double) {
        self.redius = radius
        // „Çπ„Éº„Éë„Éº„ÇØ„É©„Çπ„ÅÆinitializer„ÅØÊúÄÂæå„Å´Âëº„Å≥Âá∫„Åï„Å™„ÅÑ„Å®„ÄÅ„ÉÅ„Çß„ÉÉ„ÇØ„ÅåËµ∞„Å£„Å¶„Ç®„É©„Éº„Å´„Å™„Çã
        // „Åù„ÅÆ„Åü„ÇÅ„ÄÅredius„ÅÆÂàùÊúüÂåñ„ÅØÂÖà„Å´„Åó„Å¶„Åä„Åè
        super.init(name: name)
    }
    
    func area() -> Double {
        return redius * redius * 3.14
    }
    
    override func simpleDescription() -> String {
        return "A cicle with no sides of length."
    }
}

var cicle = Circle(name: "ball", radius: 5)
cicle.area()


// getter,setter„ÇíËøΩÂä†„Åô„Çã
class EquilateralTriangle: NamedShape {
    var sideLength: Double = 0.0
    
    init(sideLength: Double, name: String) {
        self.sideLength = sideLength
        super.init(name: name)
        numberOfSides = 3
    }
    
    var perimeter: Double {
        get {
            return 3.0 * sideLength
        }
        set {
            sideLength = newValue / 3.0
        }
    }
    
    override func simpleDescription() -> String {
        return "An equilateral triangle with sides of length \(sideLength)."
    }
}
var triangle = EquilateralTriangle(sideLength: 3.1, name: "a triangle")
print(triangle.perimeter)
triangle.perimeter = 9.9
print(triangle.sideLength)

// Âëº„Å≥Âá∫„Åï„Çå„Çã„Åæ„Åß„Éó„É≠„Éë„ÉÜ„Ç£„ÅÆ„Çª„ÉÉ„Éà„ÇíÂøÖË¶Å„Å®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØwillSet„Çí‰Ωø„ÅÜ
// ‰ª•‰∏ã„ÅÆ„ÇØ„É©„Çπ„Åß„ÅØ„ÄÅ‰∏âËßíÂΩ¢„ÅÆÊ®™ÂπÖ„Å®ÂõõËßíÂΩ¢„ÅÆÊ®™ÂπÖ„ÅØÂ∏∏„Å´Âêå„Åò„Å®„Å™„Çã

class TriangleAndSquare {
    var triangle: EquilateralTriangle {
        willSet {
            square.sideLength = newValue.sideLength
        }
    }
    var square: Square {
        willSet {
            triangle.sideLength = newValue.sideLength
        }
    }
    init(size: Double, name: String) {
        square = Square(sideLength: size, name: name)
        triangle = EquilateralTriangle(sideLength: size, name: name)
    }
}

var triangleAndSquare = TriangleAndSquare(size: 10, name: "another test shape")
print(triangleAndSquare.square.sideLength)
print(triangleAndSquare.triangle.sideLength)
triangleAndSquare.square = Square(sideLength: 50, name: "larger square")
print(triangleAndSquare.triangle.sideLength)




// „Ç´„Çπ„Çø„É†„ÇØ„É©„Çπ„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„ÇπÂ§âÊï∞„ÇÇ„ÄÅ‰ªñ„ÅÆ„ÇØ„É©„Çπ„Å®ÂêåÊßò„Å´optional„ÇíÂèñ„Çã„Åì„Å®„Åå„Åß„Åç„Çã„ÄÇ
// „ÇÇ„Åó„ÇÇÂÄ§„Åånil„Å†„Å£„ÅüÂ†¥Âêà„ÅØ„ÄÅ"?"‰ª•Èôç„ÅÆÂá¶ÁêÜ„ÅØÁÑ°Ë¶ñ„Åï„Çå„Çã
// => nil.sideLength„ÅåÂëº„Å≥Âá∫„Åï„Çå„Å¶„Åó„Åæ„ÅÑ„ÄÅnilËêΩ„Å°„Åô„Çã„Å®„ÅÑ„ÅÜ„Åì„Å®„ÅØ„Å™„ÅÑ
// optional„Çí‰Ωø„Å£„Å¶Â∞é„ÅçÂá∫„Åï„Çå„ÅüÂÄ§„ÅØ„Åô„Åπ„Å¶optional„Å™ÂÄ§„Å®„Å™„Çã„ÄÇ => "sideLength"„ÅØoptional

var optionalSquare: Square? = Square(sideLength: 2.5, name: "optional square")
var sideLength = optionalSquare?.sideLength
optionalSquare = nil
sideLength = optionalSquare?.sideLength
//: [Next](@next)
